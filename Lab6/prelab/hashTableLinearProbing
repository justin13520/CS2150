/* Justin Liu, jl8wf    Date:10/7/2020    Filename: hashTable.cpp  */
#include "hashTable.h"
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <list>

using namespace std;

hashTable::hashTable(){
  table = vector<string>();//25143
  
}

hashTable::hashTable(unsigned int wordsInDict){
  loadFactor = .5;
  size = getNextPrime(wordsInDict/loadFactor);
  table = vector<string>(size);//how do i make a vector of lists of strings a size, all things empty
  for(int i = 0; i < table.size(); i++){
    table[i] = "";
  }
}

hashTable::~hashTable(){

}

unsigned int hashTable :: hash(string k){
  return (k[0]*k[k.length()-1]+size-k[k.length()/2]*33) % size;
}

void hashTable::insert(string key, string value){
  unsigned int hashKey = hash(key);
  if(table[hashKey] != ""){
  	if(hashKey == table.size()-1){
    		hashKey = 0;
  	} 
    for(unsigned int i = hashKey i < table.size(); i++){
      if(table[i] == ""){
	table[i] = value;
	break;
      }
    }
  }
  if(table[hashKey] == "")
    table[hashKey] = value;
}
bool hashTable::found(string key){
  unsigned int hashKey = hash(key);
  if(table[hashKey] == key){
    return true;
  }
  else{
    for(int i = hashKey; i < table.size()-hashKey; i++){
      if(table[i] == ""){
	return false;
      }
      
      if(table[i] == key){
	return true;
      }
      if(hashKey+i == table.size()-1){
	i = 0;
      }
    }
  }
  return false;
}

bool hashTable:: checkprime(unsigned int p) {
    if ( p <= 1 ) // 0 and 1 are not primes; the are both special cases
        return false;
    if ( p == 2 ) // 2 is prime
        return true;
    if ( p % 2 == 0 ) // even numbers other than 2 are not prime
        return false;
    for ( int i = 3; i*i <= p; i += 2 ) // only go up to the sqrt of p
        if ( p % i == 0 )
            return false;
    return true;
}

int hashTable:: getNextPrime (unsigned int n) {
    while ( !checkprime(++n) );
    return n; // all your primes are belong to us
}

